import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import React, {ForwardedRef, useEffect, useRef, useState} from "react";
import {Scatter} from "react-chartjs-2";
import {Chart, Legend, LinearScale, LineElement, PointElement, Tooltip} from "chart.js";
import Slider from 'rc-slider';
import 'rc-slider/assets/index.css';
import axios from "axios";
import {ChartJSOrUndefined} from "react-chartjs-2/dist/types";


Chart.register(LinearScale, PointElement, LineElement, Tooltip, Legend);

export const options = {
    scales: {
        y: {
            beginAtZero: true,
        },
    },
};

export const data = {
    datasets: [
        {
            label: 'selection',
            data: [],
            backgroundColor: 'rgba(255, 99, 132, 1)',
        },
        {
            label: 'insertion',
            data: [],
            backgroundColor: 'rgb(132,189,255)',
        },
    ],
};

function getApiData(index: number, controller: AbortController, chartRef: React.MutableRefObject<any>, apiPath: string, dataIndex: number) {
    return axios.get(`http://127.0.0.1:8080/${apiPath}/${index}`, {signal: controller.signal})
        .then(res => {
            chartRef.current.data.datasets[dataIndex].data = res.data.values.map((el: number, e: number) => {
                return {
                    x: e,
                    y: el
                }
            });
            return res.data.steps;
        }).catch(err => {
            console.log(err)
        })
}

class Requests {
    abort: AbortController = new AbortController();
    insertionPromise: Promise<any>;
    selectionPromise: Promise<any>;

    constructor(selectionPromise: Promise<any>, insertionPromise: Promise<any>) {
        this.selectionPromise = selectionPromise;
        this.insertionPromise = insertionPromise;
    }

    waitForAll(chartRef: React.MutableRefObject<any>, slider) {
        Promise.all([this.insertionPromise, this.selectionPromise]).then(r => {
            console.log(r)
            let max = r.sort()[0]
            console.log(max)
            slider(max)
            chartRef.current.update()
        })
    }
}

export default function Home() {
    const [index, setIndex] = useState(0);
    const [maxSteps, setMaxSteps] = useState(1);
    const controller = new AbortController();
    const chartRef: ForwardedRef<ChartJSOrUndefined<"scatter", never[], unknown>> | undefined = useRef(null)
    useEffect(() => {
            console.log("index changed");
            let newRequests = new Requests(
                getApiData(index, controller, chartRef, "selection", 0),
                getApiData(index, controller, chartRef, "insertion", 1)
            )
            newRequests.waitForAll(chartRef, setMaxSteps);
        }, [index]
    )
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className={styles.main}>
                <Scatter ref={chartRef} options={options} data={data}/>
                {"Sort Steps"}
                <Slider step={1}
                        max={maxSteps}
                        onChange={(e) => {
                            if (typeof (e) == "number") {
                                setIndex(e)
                            }
                        }}/>
            </main>
        </>
    )
}
